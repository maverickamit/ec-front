{"version":3,"sources":["logo.svg","components/registration/registration.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserRegistration","formik","useFormik","initialValues","firstName","lastName","email","validationSchema","Yup","max","required","onSubmit","values","alert","JSON","stringify","handleSubmit","className","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","touched","errors","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,qIC6E5BC,EAzEU,WACvB,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,IAETC,iBAAkBC,IAAW,CAC3BJ,UAAWI,MACRC,IAAI,GAAI,iCACRC,SAAS,YACZL,SAAUG,MACPC,IAAI,GAAI,iCACRC,SAAS,YACZJ,MAAOE,MAAaF,MAAM,yBAAyBI,SAAS,cAE9DC,SAAU,SAACC,GACTC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,OAIvC,OACE,0BAAMD,SAAUV,EAAOe,cACrB,yBAAKC,UAAU,eACb,2BAAOC,QAAQ,aAAf,cACA,2BACED,UAAU,eACVE,GAAG,YACHC,KAAK,YACLC,KAAK,OACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAOR,aAGxBH,EAAO0B,QAAQvB,WAAaH,EAAO2B,OAAOxB,UACzC,6BAAMH,EAAO2B,OAAOxB,WAClB,KACJ,yBAAKa,UAAU,cACb,2BAAOC,QAAQ,YAAf,aACA,2BACED,UAAU,gBACVE,GAAG,WACHC,KAAK,WACLC,KAAK,OACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAOP,YAGxBJ,EAAO0B,QAAQtB,UAAYJ,EAAO2B,OAAOvB,SACxC,6BAAMJ,EAAO2B,OAAOvB,UAClB,KACJ,yBAAKY,UAAU,cACb,2BAAOC,QAAQ,SAAf,iBACA,2BACED,UAAU,eACVE,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAON,SAGxBL,EAAO0B,QAAQrB,OAASL,EAAO2B,OAAOtB,MACrC,6BAAML,EAAO2B,OAAOtB,OAClB,KACJ,4BAAQe,KAAK,UAAb,YC3DSQ,MARf,WACE,OACE,yBAAKZ,UAAU,aACb,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74d041be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst UserRegistration = () => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      firstName: Yup.string()\r\n        .max(15, \"Must be 15 characters or less\")\r\n        .required(\"Required\"),\r\n      lastName: Yup.string()\r\n        .max(20, \"Must be 20 characters or less\")\r\n        .required(\"Required\"),\r\n      email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n  \r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div className=\"form-group \">\r\n        <label htmlFor=\"firstName\">First Name</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"firstName\"\r\n          name=\"firstName\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.firstName}\r\n        />\r\n      </div>\r\n      {formik.touched.firstName && formik.errors.firstName ? (\r\n        <div>{formik.errors.firstName}</div>\r\n      ) : null}\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"lastName\">Last Name</label>\r\n        <input\r\n          className=\"form-control \"\r\n          id=\"lastName\"\r\n          name=\"lastName\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.lastName}\r\n        />\r\n      </div>\r\n      {formik.touched.lastName && formik.errors.lastName ? (\r\n        <div>{formik.errors.lastName}</div>\r\n      ) : null}\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"email\">Email Address</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.email}\r\n        />\r\n      </div>\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null}\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport UserRegistration from \"./components/registration/registration\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <UserRegistration />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport UserRegistration from \"./components/registration/registration\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}